@model ContractLayer.AddEditProjectModel
@{
    ViewBag.Title = "Add/Edit Project";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using PIM_Tool_ELCA.Controllers;
<h3 id="add-edit-header">
    @(ViewBag.EditMode == EditMode.New
        ? Resource.AddEditProject.AddEditProjectRe.AddNewProjectHeader_Label
        : Resource.AddEditProject.AddEditProjectRe.EditProjectHeader_Label )
</h3>
<div id="spinning-submit-form" class="loader loader-default" data-text="@Resource.AddEditProject.AddEditProjectRe.SubmittingForm_SpinningMessage"></div>

@using (Html.BeginForm(ViewBag.EditMode == EditMode.Edit ? $"EditProject/" : "NewProject", "Project", FormMethod.Post,
    new { id = "main-form", onSubmit = "displaySpinning()" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal" id="main-edit-new-form">
        @if (!ViewContext.ViewData.ModelState.IsValid)
        {
            @:<div class="alert alert-danger alert-dismissable" role="alert">
                @Resource.AddEditProject.AddEditProjectRe.EnterAllMandatoryField_Warning
                @: <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            @:</div>
        }
        @if (ViewBag.HasVersionWarning == true)
        {
            @:<div class="alert alert-danger alert-dismissable" role="alert">
                @Resource.AddEditProject.AddEditProjectRe.VersionWarning
                @: <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            @:</div>
        }
        @Html.HiddenFor(model => model.Id, new { htmlAttributes = new { @class = "form-control" } })
        @Html.HiddenFor(model => model.Version, new { htmlAttributes = new { @class = "form-control" } })

        <div class="form-group @(ViewData.ModelState["ProjectNumber"] != null && ViewData.ModelState["ProjectNumber"].Errors.Any() ? "has-error" : "")">
            @Html.LabelFor(model => model.ProjectNumber, htmlAttributes: new { @class = "control-label col-md-2", style = "text-align: left; padding-left:50px;" })
            <div class="col-md-10">
                @if (ViewBag.EditMode == EditMode.New)
                {
                    @Html.EditorFor(model => model.ProjectNumber,
                         new { htmlAttributes = new { @class = "form-control", style = "width:200px;", type = "number" } })
                }
                else
                {
                    @Html.EditorFor(model => model.ProjectNumber,
                           new { htmlAttributes = new { @class = "form-control", style = "width:200px;", @disabled = "disabled", type = "number" } })
                    @Html.HiddenFor(model => model.ProjectNumber,
                          new { htmlAttributes = new { @class = "form-control", style = "width:200px;" } })
                }

                @Html.ValidationMessageFor(model => model.ProjectNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group @(ViewData.ModelState["Name"] != null && ViewData.ModelState["Name"].Errors.Any() ? "has-error" : "")">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2", style = "text-align: left; padding-left:50px;" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", style = "width: 600px;" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group @(ViewData.ModelState["Customer"] != null && ViewData.ModelState["Customer"].Errors.Any() ? "has-error" : "")">
            @Html.LabelFor(model => model.Customer, htmlAttributes: new { @class = "control-label col-md-2", style = "text-align: left; padding-left:50px;" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Customer, new { htmlAttributes = new { @class = "form-control", style = "width: 600px;" } })
                @Html.ValidationMessageFor(model => model.Customer, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group @(ViewData.ModelState["GroupID"] != null && ViewData.ModelState["GroupID"].Errors.Any() ? "has-error" : "")">
            @Html.LabelFor(model => model.GroupId, htmlAttributes: new { @class = "control-label col-md-2", style = "text-align: left; padding-left:50px;" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.GroupId, (List<SelectListItem>)ViewBag.GroupList,
                 ViewBag.EditMode == EditMode.New
                 ? Resource.AddEditProject.AddEditProjectRe.GroupIDHolder_Label
                 : ""
                 , new { @class = "form-control", style = "width: 200px;" })
                @Html.ValidationMessageFor(model => model.GroupId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MemberString, htmlAttributes: new { @class = "control-label col-md-2", style = "text-align: left; padding-left:50px;" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.MemberString, new { name = "Members" })
                <select id="member-select" class="info__select" multiple style="width:600px;">
                    @foreach (var item in ViewBag.VisaList)
                    {
                        <option value="@item.Visa">@item.Visa: @item.FirstName @item.LastName</option>
                    }
                </select>
                @Html.ValidationMessageFor(model => model.MemberString, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group  @(ViewData.ModelState["Status"] != null && ViewData.ModelState["Status"].Errors.Any() ? "has-error" : "")">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2", style = "text-align: left; padding-left:50px;" })
            <div class="col-md-10">
                @{
                    List<SelectListItem> statusList = new List<SelectListItem>();
                    statusList.Add(new SelectListItem
                    {
                        Text = @Resource.AddEditProject.AddEditProjectRe.ProjectStatusNew_Label,
                        Value = "NEW",
                        Selected = Model.Status == "NEW"
                    });
                    statusList.Add(new SelectListItem
                    {
                        Text = @Resource.AddEditProject.AddEditProjectRe.ProjectStatusPlanned_Label,
                        Value = "PLA",
                        Selected = Model.Status == "PLA"
                    });
                    statusList.Add(new SelectListItem
                    {
                        Text = @Resource.AddEditProject.AddEditProjectRe.ProjectStatusInProgress_Label,
                        Value = "INP",
                        Selected = Model.Status == "INP"
                    });
                    statusList.Add(new SelectListItem
                    {
                        Text = @Resource.AddEditProject.AddEditProjectRe.ProjectStatusFinished_Label,
                        Value = "FIN",
                        Selected = Model.Status == "FIN"
                    });
                }
                @Html.DropDownListFor(model => model.Status, statusList, "", new { @class = "form-control", style = "width: 200px;" })
                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="start-end-date-parent-div">
            <div class="form-group col-md-6 @(ViewData.ModelState["StartDate"] != null && ViewData.ModelState["StartDate"].Errors.Any() ? "has-error" : "")">
                @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-4", style = "text-align: left; padding-left:34px;" })
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.StartDate, new
                   {
                       @type = "date",
                       @class = "form-control datepicker",
                       @style = "width: 200px;",
                       @Value = Model.StartDate.ToString("yyyy-MM-dd")
                   })
                    @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="end-date-div" class="form-group col-md-6 @(ViewData.ModelState["EndDate"] != null && ViewData.ModelState["EndDate"].Errors.Any() ? "has-error" : "")">
                @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.TextBoxFor(model => model.EndDate, new
                   {
                       @type = "date",
                       @class = "form-control datepicker",
                       @style = "width: 200px;",
                       @Value = Model.EndDate?.ToString("yyyy-MM-dd")
                   })
                    @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


    </div>
    <div id="cancel-submit-button-div" class="form-group">
        <div  id="cancel-button-div">
            <input type="button" id ="cancel-button"value="@Resource.AddEditProject.AddEditProjectRe.CanButton_Label" class="btn btn-default" onclick="location.href = '/Project';">
        </div>
        <div id="submit-button-div">
            <input type="button" id ="submit-button" value="@( ViewBag.EditMode == EditMode.New ? Resource.AddEditProject.AddEditProjectRe.SubmitButtonForCreateNew_Label : Resource.AddEditProject.AddEditProjectRe.SubmitButtonForEdit_Label)" class="btn btn-primary" onclick="appendVisaBeforeSubmit();">
        </div>
    </div>
}




<script>

    var memberSelect = new SlimSelect({
        select: '#member-select'
    })
    RenderOriginalMember();
    @if (ViewBag.EditMode == EditMode.Edit)
    {
    @:$("#ID").prop('disabled', true);
    }


    function RenderOriginalMember() {
        var selectedMember = [];
        @foreach (var item in Model.MembersList)
            {
                @:selectedMember.push("@item");
            }
        memberSelect.set(selectedMember);
    }
    function appendVisaBeforeSubmit() {
        var selectedVisa = memberSelect.selected();
        //document.getElementById("MemberString").value = selectedVisa.join(',');

        $("#main-form").submit();
    }

    document.getElementById("main-form").addEventListener('submit', displaySpinning);

    function displaySpinning(event) {
        if ($("#main-form").valid()) {
            document.getElementById("spinning-submit-form").classList.add("is-active");
        }
    }
</script>

